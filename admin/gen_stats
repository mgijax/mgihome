#!./python

##=====
## gen_stats
##
## Author: 	mhall
## Purpose:	This script calls on the stats module to pull out statistics that have been stored in the database.
##
##=====

import sys
if '.' not in sys.path:
        sys.path.insert (0, '.')
import warnings
warnings.filterwarnings('ignore', '', DeprecationWarning)

import Configuration
config = Configuration.get_Configuration ('Configuration', 1)	

import db

db.set_sqlLogin (config['DB_USER'], config['DB_PASSWORD'], config['DB_SERVER'], config['DB_DATABASE'])
db.useOneConnection(1)

import stats
import time

stats.setSqlFunction (db.sql)

STATSDIR = config['MGIHOME_PATH'] + 'www/homepages/stats/'

## This is all the mini home page group information.  Its formatted like a tuple
## Where the group name is first, and the name out the file its generating is second
## The third item is for the handshake betweem the minihome pages and the all stats page.
## I'm not 100% happy with the solution I've come up with here, but it works well enough for now.

stats_groups = [('Home Page', 'homepage_stats.shtml'),
	  ('Marker Mini Home', 'gene_stats.shtml'),
	  ('Pheno Mini Home', 'pad_stats.shtml'),
	  ('GXD Mini Home', 'gxd_stats.shtml'),
	  ('GO Mini Home', 'go_stats.shtml'),
	  ('SNP Mini Home', 'strain_stats.shtml'),
	  ('Orthology Mini Home', 'ortho_stats.shtml'),
	  ('Pathways Mini Home', 'path_stats.shtml'),
	  ('Stats Page Markers','allstats_markers.shtml'),
	  ('Stats Page Phenotypes','allstats_pheno.shtml'),
	  ('Stats Page GXD','allstats_gxd.shtml'),
	  ('Stats Page GO','allstats_go.shtml'),
   	  ('Stats Page Polymorphisms','allstats_snp.shtml'),
	  ('Stats Page Orthology','allstats_ortho.shtml'),
          ('Stats Page Sequences','allstats_seq.shtml'),
	  ('References','allstats_ref.shtml'),
	  ('Stats Page Pathways', 'allstats_paths.shtml')]
		   
		   

def number_format(num, places=0):
   """Format a number with grouped thousands and given decimal places"""

   places = max(0,places)
   tmp = "%.*f" % (places, num)
   point = tmp.find(".")
   integer = (point == -1) and tmp or tmp[:point]
   decimal = (point != -1) and tmp[point:] or ""

   count =  0
   formatted = []
   for i in range(len(integer), 0, -1):
       count += 1
       formatted.append(integer[i - 1])
       if count % 3 == 0 and i - 1:
           formatted.append(",")

   integer = "".join(formatted[::-1])
   return integer+decimal

def getStatsForMinihome(group, name):
	
	groupObj = stats.StatisticGroup (group)
	statistics = groupObj.getStatistics()
	
	
	file = open(STATSDIR +name, "w")
	file.write('<dl>')
	for stat in statistics:
		m = stat.getLatestMeasurement()
		if not m:
		    mVal = '&nbsp;'
		elif m.hasIntValue():
		    mVal = m.getIntValue()
		else:
		    mVal = '%1.3f' % m.getFloatValue()
		file.write('<dt>' + str(number_format(mVal)) + '</dt>')
		file.write('<dd>' + stat.getName() + '</dd>\n') 
	file.write('</dl>')
	file.close()


## Do the mini home pages.

print 'Starting to generate stats files.'
for (group, filename) in stats_groups:
	getStatsForMinihome(group, filename)
print 'Finished generating stats files.'




	    

	
	
