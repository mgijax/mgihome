#!./python
#
# Program: install
# Purpose: To be run by mgihome install script.
#	Adds integer keys to records in the links
#	file maintained by curators. 
#	Also adds line that defines top level 
#	MGI Home URL.
# Usage:
#	./install <mgihome_url>
# E.g.
#	./install http://www.informatics.jax.org/mgihome
# Input:
#	./links.dat
# Output:
#	./.links
#
# Why: The RcdFile class used to implement eGUL
#	requires that every record have a unique key
#	field. However, data maintained by curators in the
#	links file has no 'natural' key (i.e., duplicates
#	are allowed in any field), and it is too complicated
#	and error-prone to assign keys by hand. This script
#	simply adds a key field to every record, assigning
#	sequential integers, starting at 0.
# Implementation note: This script assumes that each input record
#	is started by an open square bracket ("[") on a line
#	by itself, and that the records do not already have
#	a "key" field.
#
#

#
# Standard opening...
#
import sys
if '.' not in sys.path:
	sys.path.insert (0, '.')

import string

USAGE = "Usage: install <mgihomeurl>\n"
FILEERR = "File not found or could not be opened: "

def die(message):
	print message
	sys.exit(-1)

#
# get URL argument
if len(sys.argv) != 2:
	die(USAGE)
mgihomeurl = sys.argv[1]

#
# input file.
#
fname = "links.dat"
try:
    fd = open(fname, 'r')
except:
    die(FILEERR + fname)

#
# output file. 
#
fname2 = ".links"
try:
    fd2 = open(fname2, 'w')
except:
    die(FILEERR + fname2)

#
# Warn against editing the generated file.
fd2.write("#\n# This is a generated file. DO NOT EDIT!\n")

#
# Add line to output file defining variable MGIHOME
fd2.write("MGIHOME=%s\n" % mgihomeurl)

#
# keep a counter for assigning key values.
#
counter = 0

#
# Loop through every line of the input.
#
line = fd.readline()
while line:
	line = string.strip(line)

	#
	# Strip comments and blank lines.
	if len(line) == 0 or line[0] == "#":
		line = fd.readline()
		continue

	# 
	# all other input lines go to output...
	#
	fd2.write(line+'\n')

	#
	# In addition, if the line is the start of
	# a record, add a key field, and increment
	# the counter.
	#
	if string.strip(line)[0:1] == "[":
		fd2.write("key = %d\n" % counter)
		counter = counter + 1

	#
	# next line
	#
	line = fd.readline()

##################################################
