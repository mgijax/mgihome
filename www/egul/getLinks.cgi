#!./python
#
# Program: getLinks.cgi
# Purpose: Provide access to generic URL links data
#		in various formats
# See: TR3201
#
# Description: 
###################################################################

#
# Standard beginning for CGIs...
#
import sys
if '.' not in sys.path:
	sys.path.insert (0, '.')

#
# Imports
#
import string

import Configuration
config = Configuration.get_Configuration ('Configuration', 1)

import homelib
import CGI
import errorlib
import rcdlib

# 
# String constants.
#
MIMETYPE= "Content-type: text/plain\n"
ERROR	= "ERROR:"
TSV	= "tsv"
URL	= "url"
HTML	= "html"
KEY	= "key"
ID	= "id"
TYPE	= "type"
FORMAT	= "format"
LTEXT	= "linktext"

#
# Define list of recognized formats.
#
VALIDFORMATS = [TSV,URL,HTML]


#
# Paths to things we need.
#
MGIHOME_PATH = config['MGIHOME_PATH']
LINKFILE = MGIHOME_PATH + "/www/egul/.links"

#
# The following class was lifted from one of Jon's CGIs
# and modified for our purposes. It defines a subclass of
# class CGI, which provides our standard framework.
 
#---------------------------------------------------------------------
# Class: InputProcessingCGI
# Concept:
#	IS: a CGI object with a main() method for handling input from
#		a the form generated by an invocation of
#		getLinks.cgi
#	HAS: see CGI
#	DOES: see CGI for the basics.  In this subclass, we get the
#		input, validate it, return an error if needed,
#		or query the links file and return the selected links
#		in the specified format.
#
class InputProcessingCGI (CGI.CGI):

	def __init__(self):
		#
		# All responses are 'text/plain'. See TR 3201.
		#
		print MIMETYPE
		self.fields = {}

		#
		# Initialize query parameters to None (== don't care),
		# and set format to default (tab-separated).
		#
		self.q_id = None
		self.q_type = None
		self.q_url = None
		self.r_format = TSV
		self.r_linktext = None

		#
		# Variables to hold the input record file,
		# and the list of selected records.
		#
		self.linkFile = None
		self.rcdlist = []

	#--------------------------------------------------------
	# Method: main
	# Purpose: serve as the main program for this CGI object.
	# Returns: nothing
	# Assumes: nothing
	# Effects: see DOES in the class comments
	# Throws: propagates any exceptions raised 
	# Notes: The CGI class's go() method is a wrapper around this
	#	script to provide exception handling and logging.
	#
	def main (self):

	    try:
		#
		# Get user's parameters.
		#
		self.parseParms()

		#
		# Read the database of links (a RcdFile).
		#
		self.readLinksFile()

		#
		# Find all links that satisfy the user's query,
		# and print them in the specified format.
		#
		self.doQuery()
		self.printResults()

	    except :
		#
		# Catch all errors and report them as part
		# of the response body. (see TR 3201)
		#
		self.debug(ERROR)
		self.debug(sys.exc_type)
		self.debug(sys.exc_value)

	#--------------------------------------------------------
	# Method: parseParms
	# Purpose: Get the user's query parameters and set instance
	#	variables accordingly. 
	# Returns: nothing
	# Assumes: nothing
	# Effects: Sets instance vars.
	# Throws: Bad parameter exception if the format parameter
	#	is not recorgnized.
	#
	def parseParms(self):
		parms = self.get_parms()
		if parms.has_key(ID):
			self.q_id = parms[ID]
		if parms.has_key(TYPE):
			self.q_type = parms[TYPE]
		if parms.has_key(URL):
			self.q_url = parms[URL]
		if parms.has_key(FORMAT):
			self.r_format = parms[FORMAT]
			if not self.r_format in VALIDFORMATS:
				raise "Bad parameter value", \
					"format="+self.r_format
					
		if parms.has_key(LTEXT):
			self.r_linktext = parms[LTEXT]
		
	#--------------------------------------------------------
	# Method: readLinksFile
	# Purpose: Read the links file contents into memory.
	# Returns: nothing
	# Assumes: nothing
	# Effects: creates a RcdFile instance
	# Throws: 
	#
	def readLinksFile(self):
		self.linkFile = rcdlib.RcdFile(
			LINKFILE, rcdlib.Rcd, KEY)

	#--------------------------------------------------------
	# Method: testAdd
	# Purpose: Apply query conditions to the given record, and
	#	if the record passes, add it to the selected list.
	# Returns: nothing
	# Assumes: nothing
	# Effects: appends to self.rcdlist
	# Throws: 
	#
	def testAdd(self, rcd):
		idMatch = self.q_id == None \
			or self.q_id == rcd[ID]
		typeMatch = self.q_type == None \
			or self.q_type == rcd[TYPE]
		urlMatch = self.q_url == None \
			or string.find(rcd[URL], self.q_url) >= 0
		if idMatch and typeMatch and urlMatch:
			self.rcdlist.append(rcd)


	#--------------------------------------------------------
	# Method: doQuery
	# Purpose: Loop though all records in the file, and
	#	call testAdd on each one.
	# Returns: nothing
	# Assumes: nothing
	# Effects: 
	# Throws: 
	#
	def doQuery(self):
		for k in self.linkFile.keys():
			rcd = self.linkFile[k]
			self.testAdd(rcd)

	#--------------------------------------------------------
	# Method: tsvFormat
	# Purpose: Format a record as tab-delimited text.
	# Returns: string
	# Assumes: nothing
	# Effects: 
	# Throws: 
	#
	def tsvFormat(self,rcd):
		return "%s	%s	%s" % \
			(rcd[ID], rcd[TYPE], rcd[URL])

	#--------------------------------------------------------
	# Method: urlFormat
	# Purpose: Format a record as a URL. 
	# Returns: string
	# Assumes: nothing
	# Effects: 
	# Throws: 
	#
	def urlFormat(self, rcd):
		return "%s" % rcd[URL]

	#--------------------------------------------------------
	# Method: htmlFormat
	# Purpose: Format a record as an HTML anchor tag.
	# Returns: string
	# Assumes: nothing
	# Effects: 
	# Throws: 
	#
	def htmlFormat(self, rcd):
		# 
		# If user supplied link text, use it. Otherwise,
		# the link text is the URL. (See TR3201)
		#
		if self.r_linktext == None:
			ltext = rcd[URL]
		else:
			ltext = self.r_linktext
		return '<A HREF="%s">%s</A>' % \
			(rcd[URL], ltext)


	#--------------------------------------------------------
	# Method: printResults
	# Purpose: Print all selected records in the specified format.
	# Returns: nothing
	# Assumes: nothing
	# Effects: writes to stdout
	# Throws: 
	#
	def printResults(self):
		if self.r_format == TSV:
			fmt = self.tsvFormat
		elif self.r_format == URL:
			fmt = self.urlFormat
		else:
			fmt = self.htmlFormat
		for rcd in self.rcdlist:
			print fmt(rcd)

	#--------------------------------------------------------
	# Method: debug
	# Purpose: Print argument to stdout, converting it to
	#	a string if necessary.
	# Returns: nothing
	# Assumes: nothing
	# Effects: writes to stdout
	# Throws: 
	#
	def debug(self, x):
		if type(x) != type(""):
			print `x`
		else:
			print x
		

###--- Main Program ---###

if __name__ == '__main__':
	mycgi = InputProcessingCGI()
	mycgi.main()
