import string
import os
import time

# Name: KompNomination.py
# Purpose: contains the KompNomination class, which encapsulates the reading
#	and parsing of a KOMP nomination, as generated by the script at:
#	mgihome/www/KOMP/nominationSubmit.cgi

def match (s, prefix):
	# determines if 'prefix' is at the start of 's', in a case-insensitive
	# comparison.  True if so, False if not.

	pLen = len(prefix)
	if s[:pLen].lower() == prefix.lower():
		return True
	return False

class KompNomination:
	def __init__ (self, filename):
		self.lastname = ''
		self.firstname = ''
		self.email = ''
		self.pi = ''
		self.institute = ''
		self.address1 = ''
		self.address2 = ''
		self.city = ''
		self.state = ''
		self.zip = ''
		self.country = ''
		self.phone = ''
		self.fax = ''
		self.funding = []
		self.otherFunding = ''
		self.nominations = []
		self.fileUploaded = ''
		self.date = ''
		self.nominationFile = filename

		self.load(filename)
		return

	def load (self, filename):
		fp = open(filename, 'r')
		lines = map(string.rstrip, fp.readlines())
		fp.close()

		nominationStart = None
		i = 0

		while i < len(lines):
			increment = 2
			nextLine = lines[i+1].lstrip()

			if match(lines[i], 'last'):
				self.lastname = nextLine
			elif match(lines[i], 'first'):
				self.firstname = nextLine
			elif match(lines[i], 'e-mail'):
				self.email = nextLine
			elif match(lines[i], 'laboratory'):
				self.pi = nextLine
			elif match(lines[i], 'institute'):
				self.institute = nextLine
			elif match(lines[i], 'address'):
				if self.address1:
					self.address2 = nextLine
				else:
					self.address1 = nextLine
			elif match(lines[i], 'city'):
				self.city = nextLine
			elif match(lines[i], 'state'):
				self.state = nextLine
			elif match(lines[i], 'postal'):
				self.zip = nextLine
			elif match(lines[i], 'country'):
				self.country = nextLine
			elif match(lines[i], 'telephone'):
				self.phone = nextLine
			elif match(lines[i], 'fax'):
				self.fax = nextLine
			elif match(lines[i], 'funding'):
				i = i + 1
				while lines[i][0] == '\t':
					self.funding.append(lines[i].lstrip())
					i = i + 1
				increment = 0
			elif match(lines[i], 'other'):
				self.otherFunding = nextLine
			elif match(lines[i], 'file uploaded'):
				self.fileUploaded = nextLine
			elif match(lines[i], 'nominations'):
				nominationStart = i + 2
				increment = len(lines)
			else:
				increment = 1

			i = i + increment

		if nominationStart:
			nominations = lines[nominationStart:]

			mapping = [ (0, 'approach'), (1, 'symbol'),
				(2, 'synonym'), (3, 'mgi'), (4, 'genbank'),
				(5, 'entrez'), (6, 'ensembl') ]

			for line in nominations:
				nomination = {}
				columns = line.split('\t')

				for (col, fieldname) in mapping:
					if (len(columns) > col) and \
							columns[col]:
						nomination[fieldname] = \
							columns[col]
					else:
						nomination[fieldname] = ''

				self.nominations.append (nomination)

		st = os.stat(filename)
		self.date = time.strftime('%m/%d/%Y', time.localtime(st[8]))

		return
