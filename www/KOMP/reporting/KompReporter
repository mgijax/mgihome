#!/usr/local/bin/python

# Name: KompReporter
# Purpose: This is the script that does the parsing of the KOMP nomination
#	files (submitted via mgihome/www/KOMP/nominationSubmit.cgi) and
#	generating of a report for NIH.  The report is written to stdout in 
#	tab-delimited format.

import sys
import os
import time
import getopt
import db
import KompNomination
import datasetlib

NOMINATION_URL = 'http://www.informatics.jax.org/kompprivate'
NOMINATION_DIR = None
KOMP_DATA_DIR = None

USAGE = '''Usage: %s [-b <date>][-e <date>][-u URL] <nom dir> <data dir>
	Options:
		-b : specifies beginning date of report [format: mm/dd/yyyy]
		-e : specifies ending date of report [format: mm/dd/yyyy]
		-u : specifies URL to KOMP nomination directory
			[with no ending slash]

	<nom dir>  : full path to directory containing KOMP nominations
	<data dir> : full path to directory containing KOMP data files

	If no beginning or ending dates are specified, all nominations will
	be processed.  You can only specify one or the other if you want an
	open-ended range (anything up to the ending date, or anything after
	the beginning date).

	If -u is not specified, then the default URL is used:
	%s
''' % (sys.argv[0], NOMINATION_URL)

db.set_sqlLogin ('mgd_public', 'mgdpub', 'ADHOC_MGI', 'mgd')

BEGIN_DATE = (1900, 1, 1)		# year, month, day
END_DATE = (2500, 1, 1)			# year, month, day

TARGET_DATASET = None
MASTER_DATASET = None
NOTE_COLUMN = ''

def bailout (message, showUsage = True):
	sys.stderr.write ('Error: %s\n' % message)
	if showUsage:
		sys.stderr.write (USAGE)
	sys.exit(1)

def logError (message):
	sys.stderr.write ('Error: %s\n' % message)
	return

def loadKompDatasets():
	global TARGET_DATASET
	global MASTER_DATASET

	target_fields = [ 'NCBI ID', 'MGI ID', 'symbol', 'chr', 'CCDS ID',
		'Ensembl ID', 'Vega ID' ]
	TARGET_DATASET = datasetlib.TextFileDataSet ('target',
		os.path.join (KOMP_DATA_DIR, 'geneListTarget.txt'),
		target_fields, 1)
	TARGET_DATASET.readRecords()
	TARGET_DATASET.buildIndexes (['MGI ID'])

	master_fields = target_fields + [ 'Regeneron', 'CSD' ]
	MASTER_DATASET = datasetlib.TextFileDataSet ('master',
		os.path.join (KOMP_DATA_DIR, 'geneListJustGenes.txt'),
		master_fields, 1)
	MASTER_DATASET.readRecords()
	MASTER_DATASET.buildIndexes (['MGI ID'])

	return

def convertDate(d):
	items = d.split('/')
	if len(items) != 3:
		bailout ('wrong number of date parts: %s' % d)
	try:
		month = int(items[0])
		day = int(items[1])
		year = int(items[2])
	except:
		bailout ('non-integer date parts: %s' % d)

	if not (1 <= month <= 12):
		bailout ('invalid month %d in %s' % (month, d))
	if not (1 <= day <= 31):
		bailout ('invalid day %d in %s' % (day, d))
	if not (1900 <= year <= 2500):
		bailout ('invalid year %d in %s' % (year, d))

	return (year, month, day)

def handleParameters():
	global BEGIN_DATE, END_DATE, NOMINATION_DIR, KOMP_DATA_DIR
	global NOMINATION_URL

	try:
		(opts, args) = getopt.getopt(sys.argv[1:], 'b:e:u:')
	except (getopt.GetoptError):
		bailout ('invalid command-line option(s)')

	if len(args) > 2:
		bailout ('too many command-line arguments')
	if len(args) < 2:
		bailout ('too few command-line arguments')

	NOMINATION_DIR = args[0]
	KOMP_DATA_DIR = args[1]

	for (opt, val) in opts:
		if opt == '-b':
			BEGIN_DATE = convertDate(val)
		elif opt == '-e':
			END_DATE = convertDate(val)
		elif opt == '-u':
			NOMINATION_URL = val
		else:
			bailout ('unrecognized command-line option: %s' % opt)
	return

def getSubdirs():
	allSubdirs = os.listdir (NOMINATION_DIR)
	subdirs = []

	for subdir in allSubdirs:
		if subdir == '.htaccess':
			continue
		stat = os.stat (os.path.join (NOMINATION_DIR, subdir))
		dateTuple = time.localtime(stat[8])
		ymd = (dateTuple[0], dateTuple[1], dateTuple[2])

		if (BEGIN_DATE <= ymd <= END_DATE):
			subdirs.append (subdir)
	return subdirs

def getMgiID (nomination):
	global NOTE_COLUMN

	ids = []
	for idType in ['genbank', 'entrez', 'ensembl', 'mgi']:
		id = nomination[idType]
		if (idType == 'mgi') and (id[:4]) != 'MGI:':
			id = 'MGI:' + id
		if id:
			ids.append (nomination[idType])
	if ids:
		query = '''SELECT DISTINCT a2.accID, mm.symbol
			FROM ACC_Accession a,
				ACC_Accession a2,
				MRK_Marker mm
			WHERE a._MGIType_key = 2
				AND a.private = 0
				AND a.accID IN ('%s')
				AND a._Object_key = a2._Object_key
				AND a2.private = 0
				AND a2.preferred = 1
				AND a2._LogicalDB_key = 1
				AND a2._Object_key = mm._Marker_key
				AND a2._MGIType_key = 2'''
		results = db.sql (query % "','".join (ids), 'auto')

		if len(results) == 1:
			NOTE_COLUMN = 'resolved: (%s, %s)' % (
				results[0]['accID'],
				results[0]['symbol'])
			return results[0]['accID']
		elif len(results) > 1:
			mgi = []
			for row in results:
				mgi.append ( '(%s, %s)' % \
					(row['accID'], row['symbol']) )
			NOTE_COLUMN = 'resolves to multiple MGI IDs: %s' % \
				', '.join (mgi)
		else:
			NOTE_COLUMN = 'maps to no MGI IDs'
	return ''

def getKompStatus (nomination):
	mgiID = getMgiID (nomination)
	if not mgiID:
		return ''

	if TARGET_DATASET.indexLookup ('MGI ID', mgiID):
		return 'target'
	if MASTER_DATASET.indexLookup ('MGI ID', mgiID):
		return 'master'
	return ''

def generateSummary (subdirs):
	headings = [
		'Submission Date',
		'KO Method',
		'Gene Symbol',
		'Synonyms',
		'MGI ID',
		'Genbank ID',
		'Entrez ID',
		'Ensembl ID',
		'KOMP List',
		'Notes',
		'Submitter',
		'Submitter e-mail',
		'Lab PI',
		'Institution',
		'Funding sources',
		'Submitted PDF',
		'Original submission',
		]
	print '\t'.join (headings)

	for subdir in subdirs:
		filename = os.path.join(os.path.join(NOMINATION_DIR, subdir),
			'kompNomination')
		if not os.path.exists(filename):
			bailout ('file missing: %s' % filename)

		k = KompNomination.KompNomination (filename)

		name = '%s %s' % (k.firstname, k.lastname)

		funding = k.funding[:]
		if k.otherFunding:
			if 'Other' in funding:
				funding.remove ('Other')
			funding.append ('Other (%s)' % k.otherFunding)
		fundingStr = ', '.join (funding)

		if k.fileUploaded:
			pdfUrl = '%s/%s/%s' % (NOMINATION_URL, subdir,
				k.fileUploaded)
		else:
			pdfUrl = ''

		fileUrl = '%s/%s/%s' % (NOMINATION_URL, subdir,
				os.path.basename(k.nominationFile))

		for nomination in k.nominations:
			line = [
				k.date,
				nomination['approach'],
				nomination['symbol'],
				nomination['synonym'],
				nomination['mgi'],
				nomination['genbank'],
				nomination['entrez'],
				nomination['ensembl'],
				getKompStatus(nomination),
				NOTE_COLUMN,
				name,
				k.email,
				k.pi,
				k.institute,
				fundingStr,
				pdfUrl,
				fileUrl,
				]
			print '\t'.join (line)
	return

def main():
	handleParameters()
	loadKompDatasets()
	generateSummary (getSubdirs())
	return

if __name__ == '__main__':
	main()
